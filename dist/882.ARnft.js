!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.ARnft=r():e.ARnft=r()}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var e,r,t={882:(e,r,t)=>{var a=t(801),o=t.n(a);const{ARControllerNFT:n}=o(),s=self;s.onmessage=e=>{const r=e.data;switch(r.type){case"load":return void d(r);case"stop":l=null;break;case"process":i=r.imagedata,f(i,r.frame)}};let i=null,c=0,l=null,p=null;const d=async e=>{const r=self.origin;let t,a=[],o=e.marker.length;console.debug("Base path:",r);const i=/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/gim.test(e.camera_para);1==i?t=e.addPath?r+"/"+e.addPath+"/"+e.camera_para:e.camera_para:0==i&&(t=e.addPath?r+"/"+e.addPath+"/"+e.camera_para:r+"/"+e.camera_para),console.debug("Loading camera at:",t),n.initWithDimensions(e.pw,e.ph,t).then((async t=>{l=t;const n=l.getCameraMatrix();l.addEventListener("getNFTMarker",(e=>{p={type:"found",matrixGL_RH:JSON.stringify(e.data.matrixGL_RH)}}));const i=/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/gim.test(e.marker);for(var c=0;c<o;c++){let t;1==i?e.addPath?t=r+"/"+e.addPath+"/"+e.marker[c]:a=e.marker[c]:0==i&&(t=e.addPath?r+"/"+e.addPath+"/"+e.marker[c]:r+"/"+e.marker[c]),a.push(t)}console.debug("Loading NFT marker at: ",a),await l.loadNFTMarkers(a,(e=>{var r=0;let t=l.getNFTData(e[r],0);s.postMessage({type:"markerInfos",marker:t}),l.trackNFTMarkerId(e[r]),console.log("loadNFTMarker -> ",e[r]),console.log(e[r]),s.postMessage({type:"endLoading",end:!0}),r++}),(e=>{console.error("Error: ",e," loading marker in loadNFTMarkers!")})).catch((e=>{console.error("Error in loading marker on Worker",e)})),s.postMessage({type:"loaded",proj:JSON.stringify(n)})})).catch((e=>{console.error(e)}))},f=(e,r)=>{r!==c&&(p=null,l&&l.process&&l.process(e),c=r),null!=p?s.postMessage(p):s.postMessage({type:"not found"}),e=null}}},a={};function o(e){var r=a[e];if(void 0!==r)return r.exports;var n=a[e]={exports:{}};return t[e].call(n.exports,n,n.exports,o),n.exports}o.m=t,o.x=()=>{var e=o.O(void 0,[801],(()=>o(882)));return e=o.O(e)},e=[],o.O=(r,t,a,n)=>{if(!t){var s=1/0;for(p=0;p<e.length;p++){for(var[t,a,n]=e[p],i=!0,c=0;c<t.length;c++)(!1&n||s>=n)&&Object.keys(o.O).every((e=>o.O[e](t[c])))?t.splice(c--,1):(i=!1,n<s&&(s=n));if(i){e.splice(p--,1);var l=a();void 0!==l&&(r=l)}}return r}n=n||0;for(var p=e.length;p>0&&e[p-1][2]>n;p--)e[p]=e[p-1];e[p]=[t,a,n]},o.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return o.d(r,{a:r}),r},o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((r,t)=>(o.f[t](e,r),r)),[])),o.u=e=>e+".ARnft.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={882:1};o.f.i=(r,t)=>{e[r]||importScripts(o.p+o.u(r))};var r=Object("undefined"!=typeof self?self:this).webpackChunkARnft=Object("undefined"!=typeof self?self:this).webpackChunkARnft||[],t=r.push.bind(r);r.push=r=>{var[a,n,s]=r;for(var i in n)o.o(n,i)&&(o.m[i]=n[i]);for(s&&s(o);a.length;)e[a.pop()]=1;t(r)}})(),r=o.x,o.x=()=>o.e(801).then(r);var n=o.x();return n=n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODgyLkFSbmZ0LmpzIiwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBZSxNQUFJRCxJQUVuQkQsRUFBWSxNQUFJQyxHQUNqQixDQVRELENBU21CLG9CQUFUSyxLQUF1QkEsS0FBT0MsTUFBTSxJLHVCQ1QxQ0MsRUNBQUMsRSx1Q0NxQ0osTUFBTSxnQkFBRUMsR0FBb0IsSUFHdEJDLEVBQWNMLEtBRXBCSyxFQUFJQyxVQUFhQyxJQUNiLE1BQU1DLEVBQU1ELEVBQUVFLEtBQ2QsT0FBUUQsRUFBSUUsTUFDUixJQUFLLE9BRUQsWUFEQUMsRUFBS0gsR0FHVCxJQUFLLE9BQ0RJLEVBQUssS0FDTCxNQUVKLElBQUssVUFDRFQsRUFBT0ssRUFBSUssVUFDWEMsRUFBUVgsRUFBTUssRUFBSU8sTyxFQXdCOUIsSUFBSVosRUFBa0IsS0FDbEJhLEVBQW9CLEVBQ3BCSixFQUFxQyxLQUNyQ0ssRUFBb0IsS0FFeEIsTUFBTU4sRUFBT08sTUFBT1YsSUFDaEIsTUFBTVcsRUFBV25CLEtBQUtvQixPQUN0QixJQUFJQyxFQUNBQyxFQUErQixHQUMvQkMsRUFBdUJmLEVBQUlnQixPQUFPQyxPQUN0Q0MsUUFBUUMsTUFBTSxhQUFjUixHQUM1QixNQThETVMsRUFEUyxtR0FDSUMsS0FBS3JCLEVBQUlzQixhQUNqQixHQUFQRixFQUVJUCxFQURBYixFQUFJdUIsUUFDYVosRUFBVyxJQUFNWCxFQUFJdUIsUUFBVSxJQUFNdkIsRUFBSXNCLFlBRXpDdEIsRUFBSXNCLFlBRVgsR0FBUEYsSUFFSFAsRUFEQWIsRUFBSXVCLFFBQ2FaLEVBQVcsSUFBTVgsRUFBSXVCLFFBQVUsSUFBTXZCLEVBQUlzQixZQUV6Q1gsRUFBVyxJQUFNWCxFQUFJc0IsYUFHOUNKLFFBQVFDLE1BQU0scUJBQXNCTixHQUVwQ2pCLEVBQWdCNEIsbUJBQW1CeEIsRUFBSXlCLEdBQUl6QixFQUFJMEIsR0FBSWIsR0FBZ0JjLE1BOUVwRGpCLE1BQU9rQixJQUNsQnhCLEVBQUt3QixFQUNMLE1BQU1DLEVBQWV6QixFQUFHMEIsa0JBRXhCMUIsRUFBRzJCLGlCQUFpQixnQkFBaUJDLElBQ2pDdkIsRUFBZSxDQUNYUCxLQUFNLFFBQ04rQixZQUFhQyxLQUFLQyxVQUFVSCxFQUFHL0IsS0FBS2dDLGFBQ3ZDLElBR0wsTUFFTUcsRUFERixtR0FDZWYsS0FBS3JCLEVBQUlnQixRQUU1QixJQUFLLElBQUlxQixFQUFJLEVBQUdBLEVBQUl0QixFQUFjc0IsSUFBSyxDQUNuQyxJQUFJQyxFQUNPLEdBQVBGLEVBQ0lwQyxFQUFJdUIsUUFDSmUsRUFBZTNCLEVBQVcsSUFBTVgsRUFBSXVCLFFBQVUsSUFBTXZCLEVBQUlnQixPQUFPcUIsR0FFL0R2QixFQUFnQmQsRUFBSWdCLE9BQU9xQixHQUVqQixHQUFQRCxJQUVIRSxFQURBdEMsRUFBSXVCLFFBQ1daLEVBQVcsSUFBTVgsRUFBSXVCLFFBQVUsSUFBTXZCLEVBQUlnQixPQUFPcUIsR0FFaEQxQixFQUFXLElBQU1YLEVBQUlnQixPQUFPcUIsSUFHbkR2QixFQUFjeUIsS0FBS0QsRSxDQUV2QnBCLFFBQVFDLE1BQU0sMEJBQTJCTCxTQUVuQ1YsRUFDRG9DLGVBQ0cxQixHQUNDMkIsSUFDRyxJQUFJQyxFQUFJLEVBQ1IsSUFBSTFCLEVBQVNaLEVBQUd1QyxXQUFXRixFQUFHQyxHQUFJLEdBQ2xDN0MsRUFBSStDLFlBQVksQ0FBRTFDLEtBQU0sY0FBZWMsT0FBUUEsSUFDL0NaLEVBQUd5QyxpQkFBaUJKLEVBQUdDLElBQ3ZCeEIsUUFBUTRCLElBQUksb0JBQXFCTCxFQUFHQyxJQUNwQ3hCLFFBQVE0QixJQUFJTCxFQUFHQyxJQUNmN0MsRUFBSStDLFlBQVksQ0FBRTFDLEtBQU0sYUFBYzZDLEtBQUssSUFDM0NMLEdBQUcsSUFFTk0sSUFDRzlCLFFBQVErQixNQUFNLFVBQVdELEVBQUsscUNBQXFDLElBRzFFRSxPQUFPRixJQUNKOUIsUUFBUStCLE1BQU0sb0NBQXFDRCxFQUFJLElBRy9EbkQsRUFBSStDLFlBQVksQ0FBRTFDLEtBQU0sU0FBVWlELEtBQU1qQixLQUFLQyxVQUFVTixJQUFnQixJQXVCS3FCLE9BcEIvREQsSUFDYi9CLFFBQVErQixNQUFNQSxFQUFNLEdBbUJzRSxFQUc1RjNDLEVBQVUsQ0FBQ1gsRUFBaUJZLEtBQzFCQSxJQUFVQyxJQUNWQyxFQUFlLEtBQ1hMLEdBQU1BLEVBQUdFLFNBQ1RGLEVBQUdFLFFBQVFYLEdBRWZhLEVBQVlELEdBR0ksTUFBaEJFLEVBQ0FaLEVBQUkrQyxZQUFZbkMsR0FFaEJaLEVBQUkrQyxZQUFZLENBQUUxQyxLQUFNLGNBRTVCUCxFQUFPLElBQUksQyxHQ3hMWHlELEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYW5FLFFBR3JCLElBQUlDLEVBQVMrRCxFQUF5QkUsR0FBWSxDQUdqRGxFLFFBQVMsQ0FBQyxHQU9YLE9BSEFxRSxFQUFvQkgsR0FBVUksS0FBS3JFLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNpRSxHQUdwRWhFLEVBQU9ELE9BQ2YsQ0FHQWlFLEVBQW9CWCxFQUFJZSxFQUd4QkosRUFBb0JNLEVBQUksS0FHdkIsSUFBSUMsRUFBc0JQLEVBQW9CUSxPQUFFTCxFQUFXLENBQUMsTUFBTSxJQUFPSCxFQUFvQixPQUU3RixPQURBTyxFQUFzQlAsRUFBb0JRLEVBQUVELEVBQ2xCLEVIakN2QmxFLEVBQVcsR0FDZjJELEVBQW9CUSxFQUFJLENBQUNDLEVBQVFDLEVBQVVDLEVBQUlDLEtBQzlDLElBQUdGLEVBQUgsQ0FNQSxJQUFJRyxFQUFlQyxJQUNuQixJQUFTOUIsRUFBSSxFQUFHQSxFQUFJM0MsRUFBU3VCLE9BQVFvQixJQUFLLENBR3pDLElBRkEsSUFBSzBCLEVBQVVDLEVBQUlDLEdBQVl2RSxFQUFTMkMsR0FDcEMrQixHQUFZLEVBQ1BDLEVBQUksRUFBR0EsRUFBSU4sRUFBUzlDLE9BQVFvRCxNQUNwQixFQUFYSixHQUFzQkMsR0FBZ0JELElBQWFLLE9BQU9DLEtBQUtsQixFQUFvQlEsR0FBR1csT0FBT0MsR0FBU3BCLEVBQW9CUSxFQUFFWSxHQUFLVixFQUFTTSxNQUM5SU4sRUFBU1csT0FBT0wsSUFBSyxJQUVyQkQsR0FBWSxFQUNUSCxFQUFXQyxJQUFjQSxFQUFlRCxJQUc3QyxHQUFHRyxFQUFXLENBQ2IxRSxFQUFTZ0YsT0FBT3JDLElBQUssR0FDckIsSUFBSXNDLEVBQUlYLFNBQ0VSLElBQU5tQixJQUFpQmIsRUFBU2EsRUFDL0IsQ0FDRCxDQUNBLE9BQU9iLENBbkJQLENBSkNHLEVBQVdBLEdBQVksRUFDdkIsSUFBSSxJQUFJNUIsRUFBSTNDLEVBQVN1QixPQUFRb0IsRUFBSSxHQUFLM0MsRUFBUzJDLEVBQUksR0FBRyxHQUFLNEIsRUFBVTVCLElBQUszQyxFQUFTMkMsR0FBSzNDLEVBQVMyQyxFQUFJLEdBQ3JHM0MsRUFBUzJDLEdBQUssQ0FBQzBCLEVBQVVDLEVBQUlDLEVBcUJqQixFSXpCZFosRUFBb0J1QixFQUFLdkYsSUFDeEIsSUFBSXdGLEVBQVN4RixHQUFVQSxFQUFPeUYsV0FDN0IsSUFBT3pGLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBZ0UsRUFBb0IwQixFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxDQUFNLEVDTGR4QixFQUFvQjBCLEVBQUksQ0FBQzNGLEVBQVM2RixLQUNqQyxJQUFJLElBQUlSLEtBQU9RLEVBQ1g1QixFQUFvQjZCLEVBQUVELEVBQVlSLEtBQVNwQixFQUFvQjZCLEVBQUU5RixFQUFTcUYsSUFDNUVILE9BQU9hLGVBQWUvRixFQUFTcUYsRUFBSyxDQUFFVyxZQUFZLEVBQU1DLElBQUtKLEVBQVdSLElBRTFFLEVDTkRwQixFQUFvQmlDLEVBQUksQ0FBQyxFQUd6QmpDLEVBQW9CdEQsRUFBS3dGLEdBQ2pCQyxRQUFRQyxJQUFJbkIsT0FBT0MsS0FBS2xCLEVBQW9CaUMsR0FBR0ksUUFBTyxDQUFDQyxFQUFVbEIsS0FDdkVwQixFQUFvQmlDLEVBQUViLEdBQUtjLEVBQVNJLEdBQzdCQSxJQUNMLEtDTkp0QyxFQUFvQnVDLEVBQUtMLEdBRVpBLEVBQVUsWUNIdkJsQyxFQUFvQndDLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT3JHLE1BQVEsSUFBSXNHLFNBQVMsY0FBYixFQUdoQixDQUZFLE1BQU9oRyxHQUNSLEdBQXNCLGlCQUFYaUcsT0FBcUIsT0FBT0EsTUFDeEMsQ0FDQSxDQVB1QixHQ0F4QjNDLEVBQW9CNkIsRUFBSSxDQUFDZSxFQUFLQyxJQUFVNUIsT0FBTzZCLFVBQVVDLGVBQWUxQyxLQUFLdUMsRUFBS0MsRyxNQ0FsRixJQUFJRyxFQUNBaEQsRUFBb0J3QyxFQUFFUyxnQkFBZUQsRUFBWWhELEVBQW9Cd0MsRUFBRVUsU0FBVyxJQUN0RixJQUFJQyxFQUFXbkQsRUFBb0J3QyxFQUFFVyxTQUNyQyxJQUFLSCxHQUFhRyxJQUNiQSxFQUFTQyxnQkFDWkosRUFBWUcsRUFBU0MsY0FBY0MsTUFDL0JMLEdBQVcsQ0FDZixJQUFJTSxFQUFVSCxFQUFTSSxxQkFBcUIsVUFDekNELEVBQVExRixTQUFRb0YsRUFBWU0sRUFBUUEsRUFBUTFGLE9BQVMsR0FBR3lGLElBQzVELENBSUQsSUFBS0wsRUFBVyxNQUFNLElBQUlRLE1BQU0seURBQ2hDUixFQUFZQSxFQUFVUyxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnpELEVBQW9CMEQsRUFBSVYsQyxXQ1h4QixJQUFJVyxFQUFrQixDQUNyQixJQUFLLEdBZ0JOM0QsRUFBb0JpQyxFQUFFakQsRUFBSSxDQUFDa0QsRUFBU0ksS0FFL0JxQixFQUFnQnpCLElBRWxCZSxjQUFjakQsRUFBb0IwRCxFQUFJMUQsRUFBb0J1QyxFQUFFTCxHQUU5RCxFQUdELElBQUkwQixFQUFxQjNDLE9BQXVCLG9CQUFUOUUsS0FBdUJBLEtBQU9DLE1BQXlCLGtCQUFJNkUsT0FBdUIsb0JBQVQ5RSxLQUF1QkEsS0FBT0MsTUFBeUIsbUJBQUssR0FDeEt5SCxFQUE2QkQsRUFBbUIxRSxLQUFLNEUsS0FBS0YsR0FDOURBLEVBQW1CMUUsS0F2QkN0QyxJQUNuQixJQUFLOEQsRUFBVXFELEVBQWFDLEdBQVdwSCxFQUN2QyxJQUFJLElBQUlxRCxLQUFZOEQsRUFDaEIvRCxFQUFvQjZCLEVBQUVrQyxFQUFhOUQsS0FDckNELEVBQW9CWCxFQUFFWSxHQUFZOEQsRUFBWTlELElBSWhELElBREcrRCxHQUFTQSxFQUFRaEUsR0FDZFUsRUFBUzlDLFFBQ2QrRixFQUFnQmpELEVBQVN1RCxPQUFTLEVBQ25DSixFQUEyQmpILEVBQUssQyxLVm5CN0JOLEVBQU8wRCxFQUFvQk0sRUFDL0JOLEVBQW9CTSxFQUFJLElBQ2hCTixFQUFvQnRELEVBQUUsS0FBSzRCLEtBQUtoQyxHV0R4QyxJQUFJaUUsRUFBc0JQLEVBQW9CTSxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQVJuZnQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0FSbmZ0L3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vQVJuZnQvd2VicGFjay9ydW50aW1lL3N0YXJ0dXAgY2h1bmsgZGVwZW5kZW5jaWVzIiwid2VicGFjazovL0FSbmZ0Ly4vc3JjL1dvcmtlci50cyIsIndlYnBhY2s6Ly9BUm5mdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9BUm5mdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9BUm5mdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQVJuZnQvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9BUm5mdC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vQVJuZnQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9BUm5mdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0FSbmZ0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL0FSbmZ0L3dlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vQVJuZnQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkFSbmZ0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFSbmZ0XCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgbmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18ueDtcbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSg4MDEpLnRoZW4obmV4dCk7XG59OyIsIi8qIGVzbGludC1lbnYgd29ya2VyICovXHJcbi8qXHJcbiAqICBXb3JrZXIudHNcclxuICogIEFSbmZ0XHJcbiAqXHJcbiAqICBUaGlzIGZpbGUgaXMgcGFydCBvZiBBUm5mdCAtIFdlYkFSS2l0LlxyXG4gKlxyXG4gKiAgQVJuZnQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxyXG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XHJcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxyXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cclxuICpcclxuICogIEFSbmZ0IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXHJcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxyXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxyXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXHJcbiAqXHJcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcclxuICogIGFsb25nIHdpdGggQVJuZnQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXHJcbiAqXHJcbiAqICBBcyBhIHNwZWNpYWwgZXhjZXB0aW9uLCB0aGUgY29weXJpZ2h0IGhvbGRlcnMgb2YgdGhpcyBsaWJyYXJ5IGdpdmUgeW91XHJcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXHJcbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xyXG4gKiAgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgcmVzdWx0aW5nIGV4ZWN1dGFibGUgdW5kZXIgdGVybXMgb2YgeW91ciBjaG9pY2UsXHJcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcclxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxyXG4gKiAgd2hpY2ggaXMgbmVpdGhlciBkZXJpdmVkIGZyb20gbm9yIGJhc2VkIG9uIHRoaXMgbGlicmFyeS4gSWYgeW91IG1vZGlmeSB0aGlzXHJcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcclxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxyXG4gKiAgc3RhdGVtZW50IGZyb20geW91ciB2ZXJzaW9uLlxyXG4gKlxyXG4gKiAgQ29weXJpZ2h0IDIwMjEgV2ViQVJLaXQuXHJcbiAqXHJcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcclxuICpcclxuICovXHJcbmltcG9ydCBqc2FydG9vbGtpdG5mdCBmcm9tIFwianNhcnRvb2xraXRuZnRcIjtcclxuY29uc3QgeyBBUkNvbnRyb2xsZXJORlQgfSA9IGpzYXJ0b29sa2l0bmZ0O1xyXG5pbXBvcnQgeyBBYnN0cmFjdEFSQ29udHJvbGxlck5GVCB9IGZyb20gXCJAd2ViYXJraXQvanNhcnRvb2xraXQtbmZ0L3R5cGVzL3NyYy9hYnN0cmFjdGlvbnMvQWJzdHJhY3RBUkNvbnRyb2xsZXJORlRcIjtcclxuaW1wb3J0IHsgSUltYWdlT2JqIH0gZnJvbSBcIkB3ZWJhcmtpdC9qc2FydG9vbGtpdC1uZnQvdHlwZXMvc3JjL2Fic3RyYWN0aW9ucy9Db21tb25JbnRlcmZhY2VzXCI7XHJcbmNvbnN0IGN0eDogV29ya2VyID0gc2VsZiBhcyBhbnk7XHJcblxyXG5jdHgub25tZXNzYWdlID0gKGU6IE1lc3NhZ2VFdmVudDxhbnk+KSA9PiB7XHJcbiAgICBjb25zdCBtc2cgPSBlLmRhdGE7XHJcbiAgICBzd2l0Y2ggKG1zZy50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcImxvYWRcIjoge1xyXG4gICAgICAgICAgICBsb2FkKG1zZyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcInN0b3BcIjoge1xyXG4gICAgICAgICAgICBhciA9IG51bGw7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwicHJvY2Vzc1wiOiB7XHJcbiAgICAgICAgICAgIG5leHQgPSBtc2cuaW1hZ2VkYXRhO1xyXG4gICAgICAgICAgICBwcm9jZXNzKG5leHQsIG1zZy5mcmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxudHlwZSBHZXROZnRNYXJrZXJEYXRhID0ge1xyXG4gICAgaW5kZXg6IG51bWJlcjtcclxuICAgIHR5cGU6IG51bWJlcjtcclxuICAgIG1hcmtlcjoge1xyXG4gICAgICAgIGlkOiBudW1iZXI7XHJcbiAgICAgICAgZXJyb3I6IG51bWJlcjtcclxuICAgICAgICBmb3VuZDogYm9vbGVhbjtcclxuICAgICAgICBwb3NlOiBudW1iZXJbXTtcclxuICAgIH07XHJcbiAgICBtYXRyaXg6IEZsb2F0NjRBcnJheTtcclxuICAgIG1hdHJpeEdMX1JIOiBGbG9hdDY0QXJyYXk7XHJcbn07XHJcblxyXG50eXBlIEdldE5mdE1hcmtlckV2ZW50QXJncyA9IHtcclxuICAgIG5hbWU6IFwiZ2V0TkZUTWFya2VyXCI7XHJcbiAgICBkYXRhOiBHZXROZnRNYXJrZXJEYXRhO1xyXG4gICAgdGFyZ2V0OiBhbnk7XHJcbn07XHJcblxyXG5sZXQgbmV4dDogSUltYWdlT2JqID0gbnVsbDtcclxubGV0IGxhc3RGcmFtZTogbnVtYmVyID0gMDtcclxubGV0IGFyOiBBYnN0cmFjdEFSQ29udHJvbGxlck5GVCB8IG51bGwgPSBudWxsO1xyXG5sZXQgbWFya2VyUmVzdWx0OiBhbnkgPSBudWxsO1xyXG5cclxuY29uc3QgbG9hZCA9IGFzeW5jIChtc2c6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgYmFzZVBhdGggPSBzZWxmLm9yaWdpbjtcclxuICAgIGxldCBjYW1lcmFQYXJhbVVybDogc3RyaW5nO1xyXG4gICAgbGV0IG5mdE1hcmtlclVybHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGxldCBtYXJrZXJMZW5ndGg6IG51bWJlciA9IG1zZy5tYXJrZXIubGVuZ3RoO1xyXG4gICAgY29uc29sZS5kZWJ1ZyhcIkJhc2UgcGF0aDpcIiwgYmFzZVBhdGgpO1xyXG4gICAgY29uc3Qgb25Mb2FkID0gYXN5bmMgKGFyQ29udHJvbGxlcjogQWJzdHJhY3RBUkNvbnRyb2xsZXJORlQpID0+IHtcclxuICAgICAgICBhciA9IGFyQ29udHJvbGxlcjtcclxuICAgICAgICBjb25zdCBjYW1lcmFNYXRyaXggPSBhci5nZXRDYW1lcmFNYXRyaXgoKTtcclxuXHJcbiAgICAgICAgYXIuYWRkRXZlbnRMaXN0ZW5lcihcImdldE5GVE1hcmtlclwiLCAoZXY6IEdldE5mdE1hcmtlckV2ZW50QXJncykgPT4ge1xyXG4gICAgICAgICAgICBtYXJrZXJSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZvdW5kXCIsXHJcbiAgICAgICAgICAgICAgICBtYXRyaXhHTF9SSDogSlNPTi5zdHJpbmdpZnkoZXYuZGF0YS5tYXRyaXhHTF9SSCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gYWZ0ZXIgdGhlIEFSQ29udHJvbGxlck5GVCBpcyBzZXQgdXAsIHdlIGxvYWQgdGhlIE5GVCBNYXJrZXJcclxuICAgICAgICBjb25zdCByZWdleE0gPVxyXG4gICAgICAgICAgICAvaHR0cHM/OlxcL1xcLyh3d3dcXC4pP1stYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn1cXGIoWy1hLXpBLVowLTlAOiVfXFwrLn4jKCk/Ji8vPV0qKS9naW07XHJcbiAgICAgICAgY29uc3QgcmVNID0gcmVnZXhNLnRlc3QobXNnLm1hcmtlcik7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya2VyTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG5mdE1hcmtlclVybDogc3RyaW5nO1xyXG4gICAgICAgICAgICBpZiAocmVNID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtc2cuYWRkUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5mdE1hcmtlclVybCA9IGJhc2VQYXRoICsgXCIvXCIgKyBtc2cuYWRkUGF0aCArIFwiL1wiICsgbXNnLm1hcmtlcltpXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmZ0TWFya2VyVXJscyA9IG1zZy5tYXJrZXJbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVNID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobXNnLmFkZFBhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZnRNYXJrZXJVcmwgPSBiYXNlUGF0aCArIFwiL1wiICsgbXNnLmFkZFBhdGggKyBcIi9cIiArIG1zZy5tYXJrZXJbaV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5mdE1hcmtlclVybCA9IGJhc2VQYXRoICsgXCIvXCIgKyBtc2cubWFya2VyW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5mdE1hcmtlclVybHMucHVzaChuZnRNYXJrZXJVcmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmRlYnVnKFwiTG9hZGluZyBORlQgbWFya2VyIGF0OiBcIiwgbmZ0TWFya2VyVXJscyk7XHJcblxyXG4gICAgICAgIGF3YWl0IGFyXHJcbiAgICAgICAgICAgIC5sb2FkTkZUTWFya2VycyhcclxuICAgICAgICAgICAgICAgIG5mdE1hcmtlclVybHMsXHJcbiAgICAgICAgICAgICAgICAoaWQ6IG51bWJlcltdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrZXIgPSBhci5nZXRORlREYXRhKGlkW21dLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgucG9zdE1lc3NhZ2UoeyB0eXBlOiBcIm1hcmtlckluZm9zXCIsIG1hcmtlcjogbWFya2VyIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyLnRyYWNrTkZUTWFya2VySWQoaWRbbV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9hZE5GVE1hcmtlciAtPiBcIiwgaWRbbV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlkW21dKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgucG9zdE1lc3NhZ2UoeyB0eXBlOiBcImVuZExvYWRpbmdcIiwgZW5kOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG0rKztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAoZXJyOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiLCBlcnIsIFwiIGxvYWRpbmcgbWFya2VyIGluIGxvYWRORlRNYXJrZXJzIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gbG9hZGluZyBtYXJrZXIgb24gV29ya2VyXCIsIGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjdHgucG9zdE1lc3NhZ2UoeyB0eXBlOiBcImxvYWRlZFwiLCBwcm9qOiBKU09OLnN0cmluZ2lmeShjYW1lcmFNYXRyaXgpIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvbkVycm9yID0gKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZWdleEMgPSAvaHR0cHM/OlxcL1xcLyh3d3dcXC4pP1stYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn1cXGIoWy1hLXpBLVowLTlAOiVfXFwrLn4jKCk/Ji8vPV0qKS9naW07XHJcbiAgICBjb25zdCByZUMgPSByZWdleEMudGVzdChtc2cuY2FtZXJhX3BhcmEpO1xyXG4gICAgaWYgKHJlQyA9PSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKG1zZy5hZGRQYXRoKSB7XHJcbiAgICAgICAgICAgIGNhbWVyYVBhcmFtVXJsID0gYmFzZVBhdGggKyBcIi9cIiArIG1zZy5hZGRQYXRoICsgXCIvXCIgKyBtc2cuY2FtZXJhX3BhcmE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FtZXJhUGFyYW1VcmwgPSBtc2cuY2FtZXJhX3BhcmE7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChyZUMgPT0gZmFsc2UpIHtcclxuICAgICAgICBpZiAobXNnLmFkZFBhdGgpIHtcclxuICAgICAgICAgICAgY2FtZXJhUGFyYW1VcmwgPSBiYXNlUGF0aCArIFwiL1wiICsgbXNnLmFkZFBhdGggKyBcIi9cIiArIG1zZy5jYW1lcmFfcGFyYTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYW1lcmFQYXJhbVVybCA9IGJhc2VQYXRoICsgXCIvXCIgKyBtc2cuY2FtZXJhX3BhcmE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc29sZS5kZWJ1ZyhcIkxvYWRpbmcgY2FtZXJhIGF0OlwiLCBjYW1lcmFQYXJhbVVybCk7XHJcblxyXG4gICAgQVJDb250cm9sbGVyTkZULmluaXRXaXRoRGltZW5zaW9ucyhtc2cucHcsIG1zZy5waCwgY2FtZXJhUGFyYW1VcmwpLnRoZW4ob25Mb2FkKS5jYXRjaChvbkVycm9yKTtcclxufTtcclxuXHJcbmNvbnN0IHByb2Nlc3MgPSAobmV4dDogSUltYWdlT2JqLCBmcmFtZTogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAoZnJhbWUgIT09IGxhc3RGcmFtZSkge1xyXG4gICAgICAgIG1hcmtlclJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGFyICYmIGFyLnByb2Nlc3MpIHtcclxuICAgICAgICAgICAgYXIucHJvY2VzcyhuZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdEZyYW1lID0gZnJhbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1hcmtlclJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgY3R4LnBvc3RNZXNzYWdlKG1hcmtlclJlc3VsdCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN0eC5wb3N0TWVzc2FnZSh7IHR5cGU6IFwibm90IGZvdW5kXCIgfSk7XHJcbiAgICB9XHJcbiAgICBuZXh0ID0gbnVsbDtcclxufTtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyB0aGUgc3RhcnR1cCBmdW5jdGlvblxuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcblx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG5cdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzgwMV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDg4MikpKVxuXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbn07XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rcyBhbmQgc2libGluZyBjaHVua3MgZm9yIHRoZSBlbnRyeXBvaW50XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuQVJuZnQuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgY2h1bmtzXG4vLyBcIjFcIiBtZWFucyBcImFscmVhZHkgbG9hZGVkXCJcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDg4MjogMVxufTtcblxuLy8gaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nXG52YXIgaW5zdGFsbENodW5rID0gKGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR3aGlsZShjaHVua0lkcy5sZW5ndGgpXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzLnBvcCgpXSA9IDE7XG5cdHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xufTtcbl9fd2VicGFja19yZXF1aXJlX18uZi5pID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdC8vIFwiMVwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuXHRpZighaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdGltcG9ydFNjcmlwdHMoX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpKTtcblx0XHR9XG5cdH1cbn07XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBPYmplY3QodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpW1wid2VicGFja0NodW5rQVJuZnRcIl0gPSBPYmplY3QodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpW1wid2VicGFja0NodW5rQVJuZnRcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiZGVmZXJyZWQiLCJuZXh0IiwiQVJDb250cm9sbGVyTkZUIiwiY3R4Iiwib25tZXNzYWdlIiwiZSIsIm1zZyIsImRhdGEiLCJ0eXBlIiwibG9hZCIsImFyIiwiaW1hZ2VkYXRhIiwicHJvY2VzcyIsImZyYW1lIiwibGFzdEZyYW1lIiwibWFya2VyUmVzdWx0IiwiYXN5bmMiLCJiYXNlUGF0aCIsIm9yaWdpbiIsImNhbWVyYVBhcmFtVXJsIiwibmZ0TWFya2VyVXJscyIsIm1hcmtlckxlbmd0aCIsIm1hcmtlciIsImxlbmd0aCIsImNvbnNvbGUiLCJkZWJ1ZyIsInJlQyIsInRlc3QiLCJjYW1lcmFfcGFyYSIsImFkZFBhdGgiLCJpbml0V2l0aERpbWVuc2lvbnMiLCJwdyIsInBoIiwidGhlbiIsImFyQ29udHJvbGxlciIsImNhbWVyYU1hdHJpeCIsImdldENhbWVyYU1hdHJpeCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldiIsIm1hdHJpeEdMX1JIIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlTSIsImkiLCJuZnRNYXJrZXJVcmwiLCJwdXNoIiwibG9hZE5GVE1hcmtlcnMiLCJpZCIsIm0iLCJnZXRORlREYXRhIiwicG9zdE1lc3NhZ2UiLCJ0cmFja05GVE1hcmtlcklkIiwibG9nIiwiZW5kIiwiZXJyIiwiZXJyb3IiLCJjYXRjaCIsInByb2oiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIngiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiaiIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImNodW5rTG9hZGluZ0dsb2JhbCIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiYmluZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=