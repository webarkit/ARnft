!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ARnft=e():t.ARnft=e()}("undefined"!=typeof self?self:this,(()=>(()=>{var t={466:function(t){var e;t.exports=(e=function(){function t(t){return s.appendChild(t.dom),t}function i(t){for(var e=0;e<s.children.length;e++)s.children[e].style.display=e===t?"block":"none";a=t}var a=0,s=document.createElement("div");s.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",s.addEventListener("click",(function(t){t.preventDefault(),i(++a%s.children.length)}),!1);var n=(performance||Date).now(),r=n,o=0,c=t(new e.Panel("FPS","#0ff","#002")),h=t(new e.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var d=t(new e.Panel("MB","#f08","#201"));return i(0),{REVISION:16,dom:s,addPanel:t,showPanel:i,begin:function(){n=(performance||Date).now()},end:function(){o++;var t=(performance||Date).now();if(h.update(t-n,200),t>r+1e3&&(c.update(1e3*o/(t-r),100),r=t,o=0,d)){var e=performance.memory;d.update(e.usedJSHeapSize/1048576,e.jsHeapSizeLimit/1048576)}return t},update:function(){n=this.end()},domElement:s,setMode:i}},e.Panel=function(t,e,i){var a=1/0,s=0,n=Math.round,r=n(window.devicePixelRatio||1),o=80*r,c=48*r,h=3*r,d=2*r,l=3*r,p=15*r,u=74*r,m=30*r,g=document.createElement("canvas");g.width=o,g.height=c,g.style.cssText="width:80px;height:48px";var f=g.getContext("2d");return f.font="bold "+9*r+"px Helvetica,Arial,sans-serif",f.textBaseline="top",f.fillStyle=i,f.fillRect(0,0,o,c),f.fillStyle=e,f.fillText(t,h,d),f.fillRect(l,p,u,m),f.fillStyle=i,f.globalAlpha=.9,f.fillRect(l,p,u,m),{dom:g,update:function(c,v){a=Math.min(a,c),s=Math.max(s,c),f.fillStyle=i,f.globalAlpha=1,f.fillRect(0,0,o,p),f.fillStyle=e,f.fillText(n(c)+" "+t+" ("+n(a)+"-"+n(s)+")",h,d),f.drawImage(g,l+r,p,u-r,m,l,p,u-r,m),f.fillRect(l+u-r,p,r,m),f.fillStyle=i,f.globalAlpha=.9,f.fillRect(l+u-r,p,r,n((1-c/v)*m))}}},e)}},e={};function i(a){var s=e[a];if(void 0!==s)return s.exports;var n=e[a]={exports:{}};return t[a].call(n.exports,n,n.exports,i),n.exports}i.m=t,i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var a in e)i.o(e,a)&&!i.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},i.u=t=>t+".ARnft.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var a=e.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href;var a={};return(()=>{"use strict";i.d(a,{default:()=>y});class t{static createContainer(t){if(t.container.create){const t=document.createElement("div");t.id="app";const e=document.createElement("canvas");e.id="canvas";const i=document.createElement("video");i.id="video",i.setAttribute("autoplay",""),i.setAttribute("muted",""),i.setAttribute("playsinline",""),t.appendChild(i),t.appendChild(e);const a=document.getElementById("loading");return document.body.insertBefore(t,a),{container:t,canvas:e,video:i}}return{container:document.getElementById(t.container.containerName),canvas:document.getElementById(t.container.canvasName),video:document.getElementById("video")}}static createStats(t,e){if(t&&e.stats.createHtml){const t=document.createElement("div");t.id="stats",t.className="ui stats";const e=document.createElement("div");e.id="stats1",e.className="stats-item";const i=document.createElement("p");i.className="stats-item-title",i.innerText="Main",e.appendChild(i),t.appendChild(e);const a=document.createElement("div");a.id="stats2",a.className="stats-item";const s=document.createElement("p");s.className="stats-item-title",s.innerText="Worker",a.appendChild(s),t.appendChild(a);const n=document.getElementById("loading");return document.body.insertBefore(t,n),t}}static createLoading(t){if(t.loading.create){const e=document.createElement("div");e.id="loading";const i=document.createElement("img");i.src=t.loading.logo.src,i.alt=t.loading.logo.alt;const a=document.createElement("span");return a.setAttribute("class","loading-text"),a.innerText=t.loading.loadingMessage,e.appendChild(i),e.appendChild(a),document.body.insertBefore(e,document.body.firstChild),e}}}var e=i(466),s=i.n(e);class n{canvas_process;context_process;_video;_facing;vw;vh;w;h;pw;ph;ox;oy;target;targetFrameRate=60;imageDataCache;_frame;lastCache=0;constructor(t){this.canvas_process=document.createElement("canvas"),this.context_process=this.canvas_process.getContext("2d",{alpha:!1}),this._video=t,this.target=window||i.g,this._frame=0}get facing(){return this._facing}get height(){return this.vh}get width(){return this.vw}get video(){return this._video}get frame(){return this._frame}get canvasProcess(){return this.canvas_process}get contextProcess(){return this.context_process}getFrame(){return this._frame}getImage(){const t=Date.now();if(t-this.lastCache>1e3/this.targetFrameRate){this.context_process.drawImage(this.video,0,0,this.vw,this.vh,this.ox,this.oy,this.w,this.h);const e=this.context_process.getImageData(0,0,this.pw,this.ph);null==this.imageDataCache?this.imageDataCache=e.data:this.imageDataCache.set(e.data),this.lastCache=t,this._frame++}return new ImageData(this.imageDataCache.slice(),this.pw,this.ph)}get image(){const t=Date.now();if(t-this.lastCache>1e3/this.targetFrameRate){this.context_process.drawImage(this.video,0,0,this.vw,this.vh,this.ox,this.oy,this.w,this.h);const e=this.context_process.getImageData(0,0,this.pw,this.ph);null==this.imageDataCache?this.imageDataCache=e.data:this.imageDataCache.set(e.data),this.lastCache=t,this._frame++}return new ImageData(this.imageDataCache.slice(),this.pw,this.ph)}prepareImage(){this.vw=this._video.videoWidth,this.vh=this._video.videoHeight;var t=320/Math.max(this.vw,this.vh/3*4);this.w=Math.floor(this.vw*t),this.h=Math.floor(this.vh*t),this.pw=Math.floor(Math.max(this.w,this.h/3*4)),this.ph=Math.floor(Math.max(this.h,this.w/4*3)),this.ox=Math.floor((this.pw-this.w)/2),this.oy=Math.floor((this.ph-this.h)/2),this.canvas_process.width=this.pw,this.canvas_process.height=this.ph,this.context_process.fillStyle="black",this.context_process.fillRect(0,0,this.pw,this.ph)}async initialize(t){if(this._facing=t.facingMode||"environment",null!=t.targetFrameRate&&(this.targetFrameRate=t.targetFrameRate),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return Promise.reject("Sorry, Your device does not support this experience.");try{const e={audio:!1,video:{facingMode:this._facing,width:{min:t.width.min,max:t.width.max}}};if(navigator.mediaDevices.enumerateDevices){const t=await navigator.mediaDevices.enumerateDevices(),i=[];let a=0;t.forEach((function(t){"videoinput"==t.kind&&(i[a++]=t.deviceId)})),i.length>1&&(e.video.deviceId={exact:i[i.length-1]})}const i=await navigator.mediaDevices.getUserMedia(e);return this._video.srcObject=i,this._video=await new Promise((t=>{this._video.onloadedmetadata=()=>t(this._video)})),this.prepareImage(),!0}catch(t){return Promise.reject(t)}}destroy(){const t=this._video;this.target.addEventListener("stopVideoStreaming",(function(){const e=t.srcObject;if(console.log("stop streaming"),null!=e){e.getTracks().forEach((function(t){t.stop()})),t.srcObject=null;let i=document.getElementById("app");null!=i&&i.remove()}}))}}window||i.g;function r(t,e){var i=320/Math.max(t,e/3*4),a=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?window.outerWidth/t:1;let s=t*i,n=e*i;return[t*a,e*a,Math.max(s,n/3*4),Math.max(n,s/4*3),s,n]}async function o(t){try{const e=await fetch(t);if(!e.ok)throw new Error("HTTP error, status = "+e.status);return e.json()}catch(t){return Promise.reject(t)}}class c{worker;markerURL;_processing=!1;vw;vh;target;uuid;name;addPath;ready;constructor(t,e,a,s,n,r){this.markerURL=t,this.vw=e,this.vh=a,this.target=window||i.g,this.uuid=s,this.name=n,this.ready=!1,this.addPath=r}async initialize(t,e,a){this.worker=new Worker(new URL(i.p+i.u(882),i.b));const s=this.worker;return this.target.addEventListener("terminateWorker-"+this.name,(function(){s.postMessage({type:"stop"}),s.terminate()})),await this.load(t,e,a)}process(t,e){this._processing||(this._processing=!0,this.worker.postMessage({type:"process",imagedata:t,frame:e},[t.data.buffer]))}load(t,e,i){let[a,s,n,o,c,h]=r(this.vw,this.vh);const d=new CustomEvent("getWindowSize",{detail:{sw:a,sh:s}});this.target.dispatchEvent(d),this.worker.postMessage({type:"load",pw:n,ph:o,camera_para:t,marker:this.markerURL,addPath:this.addPath}),this.worker.onmessage=t=>{var e=t.data;switch(e.type){case"loaded":{var a=JSON.parse(e.proj);const t=n/c,i=o/h;a[0]*=t,a[4]*=t,a[8]*=t,a[12]*=t,a[1]*=i,a[5]*=i,a[9]*=i,a[13]*=i;const s=new CustomEvent("getProjectionMatrix",{detail:{proj:a}});this.target.dispatchEvent(s);break}case"endLoading":if(1==e.end){const t=document.getElementById("loading");t&&(t.querySelector(".loading-text").innerText="Start the tracking!",setTimeout((function(){null!=t.parentElement&&t&&t.parentElement.removeChild(t)}),2e3))}this.ready=!0,this.target.dispatchEvent(new CustomEvent("nftLoaded-"+this.uuid));break;case"markerInfos":{const t=e.marker,i=new CustomEvent("getNFTData-"+this.uuid+"-"+this.name,{detail:{dpi:t.dpi,width:t.width,height:t.height}});this.target.dispatchEvent(i);break}case"found":this.found(e);break;case"not found":this.found(null)}this._processing=!1,i()},this.worker.onerror=t=>{console.error("Worker error from NFTWorker: ",t)};let l=()=>{e(),window.requestAnimationFrame(l)};return l(),Promise.resolve(!0)}found(t){let e;if(t){e=JSON.parse(t.matrixGL_RH);const i=new CustomEvent("getMatrixGL_RH-"+this.uuid+"-"+this.name,{detail:{matrixGL_RH:e,name:this.name}});this.target.dispatchEvent(i)}else{e=null;const t=new CustomEvent("nftTrackingLost-"+this.uuid+"-"+this.name,{detail:{name:this.name}});this.target.dispatchEvent(t)}}isReady(){return this.ready}getUuid(){return this.uuid}getName(){return this.name}getMarkerUrl(){return this.markerURL}getEventTarget(){return this.target}destroy(){}}const h={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let d;const l=new Uint8Array(16);function p(){if(!d&&(d="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!d))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return d(l)}const u=[];for(let t=0;t<256;++t)u.push((t+256).toString(16).slice(1));function m(t,e=0){return(u[t[e+0]]+u[t[e+1]]+u[t[e+2]]+u[t[e+3]]+"-"+u[t[e+4]]+u[t[e+5]]+"-"+u[t[e+6]]+u[t[e+7]]+"-"+u[t[e+8]]+u[t[e+9]]+"-"+u[t[e+10]]+u[t[e+11]]+u[t[e+12]]+u[t[e+13]]+u[t[e+14]]+u[t[e+15]]).toLowerCase()}const g=function(t,e,i){if(h.randomUUID&&!e&&!t)return h.randomUUID();const a=(t=t||{}).random||(t.rng||p)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,e){i=i||0;for(let t=0;t<16;++t)e[i+t]=a[t];return e}return m(a)},f=JSON.parse('{"name":"@webarkit/ar-nft","version":"0.14.3","main":"dist/ARnft.js","types":"types/src/index.d.ts","description":"WebAR Javscript library for markerless AR","keywords":["ARToolKit","AR","ARnft","Augmented Reality","WebAR","JavaScript","jsartoolkit","jsartoolkit5","jsartoolkitNFT","NFT","Natural Feature Tracking","image tracking","markerless"],"author":{"name":"Walter Perdan","email":"github@kalwaltart.it","url":"https://www.kalwaltart.com"},"repository":{"type":"git","url":"https://github.com/webarkit/ARnft"},"homepage":"https://github.com/webarkit/ARnft","contributors":["Github Contributors (https://github.com/webarkit/ARnft/graphs/contributors)"],"bugs":{"url":"https://github.com/webarkit/ARnft/issues"},"devDependencies":{"@types/node":"^18.11.18","@types/stats.js":"^0.17.0","@types/uuid":"^9.0.0","prettier":"^2.8.3","rimraf":"^4.1.2","stats.js":"^0.17.0","ts-loader":"^9.4.2","typedoc":"^0.23.24","typescript":"^4.9.5","webpack":"^5.75.0","webpack-cli":"^5.0.1"},"scripts":{"build-ts":"rimraf ./dist && tsc && webpack --mode production","dev-ts":"rimraf ./dist && tsc && webpack --mode development --progress --watch","docs":"typedoc","format-check":"prettier --check .","format":"prettier --write ."},"license":"LGPL-3.0","resolutions":{},"dependencies":{"@webarkit/jsartoolkit-nft":"^1.3.0","terser-webpack-plugin":"^5.3.6","uuid":"^9.0.0"}}'),{version:v}=f;class w{cameraView;appData;addPath;width;height;configUrl;markerUrl;camData;autoUpdate=!0;controllers;static entities;target;uuid;version;initialized;_views;constructor(t,e,a){this.width=t,this.height=e,this.configUrl=a,this.target=window||i.g,this.uuid=g(),this.version=v,console.log("ARnft ",this.version)}static async init(t,e,i,a,s,n){return w.initWithConfig({width:t,height:e,markerUrls:i,names:a,configUrl:s,stats:n})}static async initWithEntities(t,e,i,a,s){return w.initWithConfig({width:t,height:e,entities:i,configUrl:a,stats:s})}static async initWithConfig(t){const e=new w(t.width,t.height,t.configUrl);null!=t.autoUpdate&&(e.autoUpdate=t.autoUpdate);try{let i,a=[];const s=t,n=t;if(null!=s.markerUrls&&null!=s.names)null==n.entities&&(a=s.markerUrls,i=s.names,this.entities=i.map((function(t,e,i){return{name:t[0],markerUrl:a[e][0]}})));else{if(null==n.entities)throw"markerUrls or entities can't be undefined";this.entities=n.entities,a=this.entities.map((t=>[t.markerUrl])),i=this.entities.map((t=>[t.name]))}return await e._initialize(a,i,t.stats)}catch(t){if(t.code)return console.error(t),Promise.reject(t)}}async _initialize(e,i,a){const r=new Event("initARnft");let h,d;this.target.dispatchEvent(r),console.log("ARnft init() %cstart...","color: yellow; background-color: blue; border-radius: 4px; padding: 2px"),o(this.configUrl).then((e=>{this.appData=e,this.addPath=e.addPath,this._views=t.createContainer(this.appData),this._views.loading=t.createLoading(this.appData),this._views.stats=t.createStats(this.appData.stats.createHtml,this.appData),a&&(h=new(s()),h.showPanel(0),document.getElementById("stats1").appendChild(h.dom),d=new(s()),d.showPanel(0),document.getElementById("stats2").appendChild(d.dom));var i=new Event("containerEvent");return document.dispatchEvent(i),this.controllers=[],this.cameraView=new n(this._views.video),this.cameraView.initialize(this.appData.videoSettings)})).then((()=>{const t=()=>a?h.update():null,s=()=>a?d.update():null;e.forEach(((e,a)=>{this.controllers.push(new c(e,this.width,this.height,this.uuid,i[a][0],this.addPath)),this.controllers[a].initialize(this.appData.cameraPara,t,s)})),this.initialized=!0})).catch((function(t){return Promise.reject(t)})),this.target.addEventListener("nftLoaded-"+this.uuid,(()=>{0===this.controllers.filter((t=>!1===t.isReady())).length&&this.target.dispatchEvent(new CustomEvent("ARnftIsReady"))}));let l=()=>{this.initialized&&this.autoUpdate&&this.controllers.forEach((t=>t.process(this.cameraView.image,this.cameraView.frame))),requestAnimationFrame(l)};return l(),this}async initializeRaw(e,i,a,n){const r=new Event("initARnft");let h,d;this.target.dispatchEvent(r),console.log("ARnft init() %cstart...","color: yellow; background-color: blue; border-radius: 4px; padding: 2px"),o(this.configUrl).then((e=>{this.appData=e,this.addPath=e.addPath,this._views=t.createContainer(this.appData),this._views.loading=t.createLoading(this.appData),this._views.stats=t.createStats(this.appData.stats.createHtml,this.appData),n&&(h=new(s()),h.showPanel(0),document.getElementById("stats1").appendChild(h.dom),d=new(s()),d.showPanel(0),document.getElementById("stats2").appendChild(d.dom));var i=new Event("containerEvent");return document.dispatchEvent(i),this.controllers=[],a.initialize(this.appData.videoSettings)})).then((()=>{const t=()=>n?h.update():null,a=()=>n?d.update():null;e.forEach(((e,s)=>{this.controllers.push(new c(e,this.width,this.height,this.uuid,i[s],this.addPath)),this.controllers[s].initialize(this.appData.cameraPara,t,a)})),this.initialized=!0})).catch((function(t){return Promise.reject(t)})),this.target.addEventListener("nftLoaded-"+this.uuid,(()=>{0===this.controllers.filter((t=>!1===t.isReady())).length&&this.target.dispatchEvent(new CustomEvent("ARnftIsReady"))}));let l=()=>{this.initialized&&this.autoUpdate&&this.controllers.forEach((t=>t.process(a.getImage(),a.getFrame()))),requestAnimationFrame(l)};return l(),this}update(){this.initialized&&!this.autoUpdate&&null!=this.cameraView&&this.controllers.forEach((t=>t.process(this.cameraView.image,this.cameraView.frame)))}static getEntities(){return this.entities}getEventTarget(){return this.target}get views(){return Object.freeze(this._views)}dispose(){this.disposeVideoStream(),this.disposeAllNFTs()}disposeNFT(t){var e=new Event("terminateWorker-"+t);this.target.dispatchEvent(e)}disposeAllNFTs(){w.getEntities().forEach((t=>{this.disposeNFT(t.name)}))}disposeVideoStream(){this.cameraView.destroy();var t=new Event("stopVideoStreaming");this.target.dispatchEvent(t)}}const y={ARnft:w}})(),a=a.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,